.\"Manpage for simple_shell(1)
.\" Contact [Cathy, Xavier and Yoann] <cathy.augustin@holbertonstudents.com> for feedback or improvements
.TH SIMPLE_SHELL "August 2023" "Version 1.0" "User Commands"
.SH NAME
simple_shell \- formatted output conversion
.SH SYNOPSIS
.nf
The shell is executed by typing ./hsh
.br
Then, it will wait for an input such as : command [arguments] [other]
.fi
.SH DESCRIPTION
This program simulates a command interpreter based in Unix and GNU/LINUX with its basic commands.
through a terminal emulator and some executable instructions(shell scripts) the user can interact with this \fBsimple_shell.\fR
This simple_shell is not supossed to be an exact imitation of the original Unix Shell. This doesn't cover all of the instructions the original does.

.br
.B What hsh can do :
.br
- Executes any command with its arguments
.br
- Executes built-in commands
.br
- Handle pipes
.br
- Handle the command seperator ;
.br
- Handle && and || logical operators
.br
- handle variable replacement
.br
- handle the $? variable
.br
- handle the $$ variable

.SS INVOCATION

To start the interactive mode the program will be executed, then starts the mode indicated by '$', to exit of the mode type 'exit' or type 'ctrl + d' and in the mode non-interactive the location that contains the command to be executed must be specified in the command line.

.SS EXECUTION

The program takes the arguments of the command line in a string and it is tokenizes into words using "space" as a delimiter, the first word is consider the command and all remaining are considered the arguments to that command. If the command is valid:

1. If the first argument is different to '.', '/' or shell builtin, the program searches in the PATH and then invocates it.
2. If the first character is '.' or '/', the program executes that typed command with the passed argument.

.SH EXAMPLES
The following example demonstrates how to use \fB_printf()\fP:

.nf
.B #include <stdio.h>

int main() {
    int a = 42;
    char ch = 'X';
    char *str = "Hello, world!";
    
    int count = _printf("Integer: %d, Character: %c, String: %s\\n", a, ch, str);
    _printf("Total characters printed: %d\\n", count);
    return 0;
}
.fi

This will output:
.nf
Integer: 42, Character: X, String: Hello, world!
Total characters printed: 38
.fi

.SH NOTES
.PP
.SH OPTIONS
.B Simple Shell
operates in both
.I interactive
and 
.I non-interactive
mode. The user may initiate
.B simple shell
and begin working or initate
.B simple shell
using commands meant to be run by the program.
.SH ARGUMENTS
The first argument, argument 0 is understood to be the command to be run by
.B simple shell
and arguments following as modifier or options.
.SH Return value
The return value of a simple command is its exit status
.SH Example
.PP

$./hsh

$

$ls 

.RS 3
AUTHORS           _gentenv.c               _getpath.c
.br
executable.c      our_exits.c           man_1_simple_shell
.br
printenv.c          tokens.c                 main.c
.br
main.h              README.md
.RE
$
.SH OPTIONS
.PP
There are no options for the moment.
.SH EXIT STATUS
The exit value depends on how a function has terminated. Every error is identified by a certain value. On success it will always return 0.
.SH RETURN VALUE
Return 0 on success, otherwise it will return the exit value.
.SH ENVIRONMENT
- PATH
.br
- $?
.br
- $$

.SH BUGS
.PP
There is no known bugs at the moment.

.SH AUTHOR
.PP
This Simple_shell()\fP function example and man page were created by [Cathy, Xavier and Yoann].

.SH COPYRIGHT
.PP
No copyright. This is free and unencumbered software released into the public domain.
